generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// Define the product model
model Product {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  url           String         @unique
  currency      String
  image         String
  title         String
  currentPrice  Float
  originalPrice Float
  reviewsCount  Int
  isOutOfStock  Boolean        @default(false)
  rating        Int
  lowestPrice   Float
  highestPrice  Float
  averagePrice  Float
  discountRate  Float
  description   String?
  category      String?
  userIDs       String[]       @db.ObjectId
  users         User[]         @relation(fields: [userIDs], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  priceHistory  PriceHistory[]
}

// Define the price history model
model PriceHistory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  price     Float
  date      DateTime? @default(now())
  productId String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  pwdHash   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productIDs String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIDs], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
